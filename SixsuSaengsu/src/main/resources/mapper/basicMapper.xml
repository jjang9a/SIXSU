<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
<mapper namespace="co.sixsu.app.basic.mapper.BasicMapper">

<select id="getRole" resultType="String">
	select role_id
	from employee_role r join employee e
	on ( r.dept = e.emp_dept and r.rk = e.emp_rk)
	where emp_id=#{id}
</select>

<select id="getEmp" resultType="EmpVO">
	select *
	from employee
	where emp_id=#{empId}
</select>

<!-- 사원 관리 -->
<select id="empList" resultType="EmpVO">
	select emp_id, emp_name, emp_tell, TO_CHAR(emp_birth, 'yyyy-MM-dd') emp_birth, TO_CHAR(emp_hire, 'yyyy-MM-dd') emp_hire, emp_dept, emp_rk, emp_stat, emp_note  
	from employee
	order by emp_stat, emp_id
</select>

<update id="updatePw" parameterType="EmpVO">
	update employee
	set emp_pw = #{empPw}
	where emp_id = #{empId}
</update>

<insert id="addEmp" parameterType="EmpVO">
	<selectKey keyProperty="empId" resultType="String" order="BEFORE">
		SELECT emp_seq.nextval
		FROM dual
	</selectKey>
	insert into employee values (
	#{empId}, #{empName}, #{empTell}, TO_DATE(#{empBirth}, 'yyyy-MM-dd'), TO_DATE(#{empHire}, 'yyyy-MM-dd'), #{empDept}, #{empRk}, #{empStat}, #{empNote}, #{empPw} 
	)
</insert>

<update id="updateEmp" parameterType="EmpVO">
	update employee
	set emp_name=#{empName}, emp_tell=#{empTell}, emp_dept=#{empDept}, emp_rk=#{empRk}, emp_note=#{empNote}
	where emp_id=#{empId}
</update>

<select id="searchEmp" parameterType="SearchDTO" resultType="EmpVO">
	SELECT *
	FROM employee
	WHERE 
	<if test='searchType.equals("id")'>
		emp_id = #{searchKey}
	</if>
	<if test='searchType.equals("name")'>
		emp_name like '%'||#{searchKey}||'%'
	</if>
</select>
<!-- 사원 관리 종료 -->

<!-- 공통코드 관리 -->
<select id="groupList" resultType="CodeVO">
	select * from group_code
</select>

<select id="commGroupList" parameterType="String" resultType="map">
	SELECT com_id as "value", com_name as "text"
	FROM common_code
	WHERE g_id = #{code}
	ORDER BY com_stat desc, com_id
</select>


<select id="commList" parameterType="SearchDTO" resultType="CodeVO">
	SELECT *
	FROM common_code
	WHERE 
	<if test='searchType.equals("group")'>
		g_id = upper(#{searchKey})
	</if>
	<if test='searchType.equals("code")'>
		com_id like '%'||upper(#{searchKey})||'%'
	</if>
	<if test='searchType.equals("name")'>
		com_name like '%'||#{searchKey}||'%'
	</if>
	ORDER BY com_stat desc, com_id
</select>

<insert id="addCode" parameterType="CodeVO">
	INSERT INTO common_code VALUES(upper(#{comId}), #{gId}, #{comName}, #{comNote}, #{comStat})
</insert>

<update id="updateCode" parameterType="CodeVO">
	UPDATE common_code
	SET com_name = #{comName}, com_note = #{comNote}, com_stat = #{comStat}
	WHERE com_id = #{comId}	
</update>

<insert id="addGroup" parameterType="CodeVO">
	INSERT INTO group_code VALUES(upper(#{gId}), #{gName})
</insert>
<!-- 공통코드 관리 종료 -->

<!-- 완제품 관리 -->
<select id="cpList" resultType="ProductVO">
	select *
	from complete_prod p
	LEFT OUTER join common_code c on p.cp_size = c.com_id 
	order by cp_stat desc, cp_id
</select>

<insert id="addCp" parameterType="ProductVO">
	<selectKey keyProperty="cpId" resultType="String" order="BEFORE">
		SELECT 'CP' || LPAD(TO_NUMBER(NVL(SUBSTR(max(cp_id), -3), 0))+1, 3, '0')
		FROM complete_prod
	</selectKey>
	INSERT INTO complete_prod VALUES (#{cpId}, #{cpName}, #{cpSize}, #{cpLot}, #{cpUnit}, #{cpStat}, #{cpNote})
</insert>

<update id="updateCp" parameterType="ProductVO">
	UPDATE complete_prod
	SET cp_name=#{cpName}, cp_size=#{cpSize}, cp_lot=#{cpLot}, cp_unit=#{cpUnit}, cp_stat=#{cpStat}, cp_note=#{cpNote}
	WHERE cp_id = #{cpId}
</update>

<select id="searchCp" parameterType="SearchDTO" resultType="ProductVO">
	SELECT *
	FROM complete_prod
	WHERE 
	<if test='searchType.equals("id")'>
		cp_id like '%'||#{searchKey}||'%' OR lower(cp_id) like '%'||#{searchKey}||'%'
	</if>
	<if test='searchType.equals("name")'>
		cp_name like '%'||#{searchKey}||'%'
	</if>
	ORDER BY cp_stat desc, cp_id
</select>
<!-- 완제품 관리 종료 -->

<!-- 반제품 관리 -->
<select id="spList" resultType="ProductVO">
	select * from semi_prod
	order by sp_stat desc, sp_id
</select>

<insert id="addSp" parameterType="ProductVO">
	<selectKey keyProperty="spId" resultType="String" order="BEFORE">
		SELECT 'SP' || LPAD(TO_NUMBER(NVL(SUBSTR(max(sp_id), -3), 0))+1, 3, '0')
		FROM semi_prod
	</selectKey>
	INSERT INTO semi_prod VALUES (#{spId}, #{spName}, #{spSize}, #{spLot}, #{spUnit}, #{spStat}, #{spNote})
</insert>

<update id="updateSp" parameterType="ProductVO">
	UPDATE semi_prod
	SET sp_name=#{spName}, sp_size=#{spSize}, sp_lot=#{spLot}, sp_unit=#{spUnit}, sp_stat=#{spStat}, sp_note=#{spNote}
	WHERE sp_id = #{spId}
</update>

<select id="searchSp" parameterType="SearchDTO" resultType="ProductVO">
	SELECT *
	FROM semi_prod
	WHERE 
	<if test='searchType.equals("id")'>
		sp_id like '%'||#{searchKey}||'%' OR lower(sp_id) like '%'||#{searchKey}||'%'
	</if>
	<if test='searchType.equals("name")'>
		sp_name like '%'||#{searchKey}||'%'
	</if>
	ORDER BY sp_stat desc, sp_id
</select>
<!-- 반제품 관리 종료 -->

<!-- 자재 관리 -->
<select id="matList" resultType="MaterialVO">
	select * from material
	order by mat_stat desc, mat_id
</select>

<insert id="addMat" parameterType="MaterialVO">
	<selectKey keyProperty="matId" resultType="String" order="BEFORE">
		SELECT 'M' || LPAD(TO_NUMBER(NVL(SUBSTR(max(mat_id), -3), 0))+1, 3, '0')
		FROM material
	</selectKey>
	INSERT INTO material VALUES (#{matId}, #{matName}, #{matSize}, #{matUnit}, #{matSafe},#{matStat}, #{matNote})
</insert>

<update id="updateMat" parameterType="MaterialVO">
	UPDATE material
	SET mat_name=#{matName}, mat_size=#{matSize}, mat_safe=#{matSafe}, mat_unit=#{matUnit}, mat_stat=#{matStat}, mat_note=#{matNote}
	WHERE mat_id = #{matId}
</update>

<select id="searchMat" parameterType="SearchDTO" resultType="MaterialVO">
	SELECT *
	FROM material
	WHERE 
	<if test='searchType.equals("id")'>
		mat_id like '%'||#{searchKey}||'%' OR lower(mat_id) like '%'||#{searchKey}||'%'
	</if>
	<if test='searchType.equals("name")'>
		mat_name like '%'||#{searchKey}||'%'
	</if>
	ORDER BY mat_stat desc, mat_id
</select>
<!-- 자재 관리 종료 -->

<!-- 거래처 관리 -->
<select id="checkBusNum" parameterType="String" resultType="int">
	select count(bus_num)
	from business
	where bus_num = #{num}
</select>

<select id="busList" resultType="BusVO">
	select *
	from business b left outer join common_code c
	on b.bus_type = c.com_id
	order by bus_stat desc, bus_id
</select>

<insert id="addBus" parameterType="BusVO">
	<selectKey keyProperty="busId" resultType="String" order="BEFORE">
		SELECT 'BUS' || LPAD(TO_NUMBER(NVL(SUBSTR(max(bus_id), -3), 0))+1, 3, '0')
		FROM business
	</selectKey>
	INSERT INTO business VALUES(#{busId}, #{busType} ,#{busName}, #{busNum}, #{busTell}, #{busAddr}, #{busStat}, #{busNote})
</insert>

<update id="updateBus" parameterType="BusVO">
	UPDATE business
	SET bus_type=#{busType} ,bus_name=#{busName}, bus_tell=#{busTell}, bus_num=#{busNum}, bus_addr=#{busAddr}, bus_note=#{busNote}, bus_stat=#{busStat}
	WHERE bus_id=#{busId}
</update>

<sql id="busSql">
	<where>
		<if test="busId != null and busId != ''.toString()">
			bus_id LIKE '%'||upper(#{busId})||'%'
		</if>
		<if test="busName != null and busName != ''.toString()">
			or ( bus_name LIKE '%'||#{busName}||'%' )
		</if>
		<if test="busType != null and busType != ''.toString()">
			and ( bus_type = #{busType} )
		</if>
	</where>
</sql>

<select id="searchBus" resultType="BusVO">
	SELECT b.*, get_com_name(bus_type) com_name
	FROM business b
	<include refid="busSql"></include>
	ORDER BY bus_stat desc, bus_id
</select>
<!-- 거래처 관리 종료 -->

<!-- 공정 관리 -->
<select id="procList" resultType="ProcessVO">
	select *
	from process p left outer join common_code c
	on p.proc_type = c.com_id
	order by proc_stat desc, proc_id
</select>

<select id="getComList" parameterType="String" resultType="CodeVO">
	select com_id, com_name
	from common_code
	where g_id = upper(#{key})
</select>

<insert id="addProc" parameterType="ProcessVO">
	<selectKey keyProperty="procId" resultType="String" order="BEFORE">
		SELECT 'PROC' || LPAD(TO_NUMBER(NVL(SUBSTR(max(proc_id), -3), 0))+1, 3, '0')
		FROM process
	</selectKey>
	INSERT INTO process VALUES (#{procId}, #{procType}, #{procName}, #{procStat}, #{procNote})
</insert>

<update id="updateProc" parameterType="ProcessVO">
	UPDATE process
	SET proc_type=#{procType}, proc_name=#{procName}, proc_stat=#{procStat}, proc_note=#{procNote}
	WHERE proc_id=#{procId}
</update>

<select id="searchProc" parameterType="SearchDTO" resultType="ProcessVO">
	SELECT *
	FROM process p left outer join common_code c
	ON p.proc_type = c.com_id
	WHERE 
	<if test='searchType.equals("id")'>
		proc_id like '%'||#{searchKey}||'%' OR lower(proc_id) like '%'||#{searchKey}||'%'
	</if>
	<if test='searchType.equals("name")'>
		proc_name like '%'||#{searchKey}||'%'
	</if>
	<if test='searchType.equals("type")'>
		proc_type = #{searchKey}
	</if>
	ORDER BY proc_stat desc, proc_id
</select>
<!-- 공정 관리 종료 -->

<!-- BOM 관리 -->
<select id="activeCpList" resultType="ProductVO">
	SELECT com_name as cp_size, p.*
	FROM complete_prod p
    JOIN common_code c ON p.cp_size = c.com_id
	WHERE cp_stat = 'Y'
	ORDER BY cp_id
</select>

<select id="activeSpList" resultType="ProductVO">
	SELECT sp_id as cp_id, sp_name as cp_name, sp_size as cp_size, sp_unit as cp_unit
	FROM semi_prod
	WHERE sp_stat = 'Y'
    UNION
	SELECT mat_id cp_id, mat_name cp_name, mat_size cp_size, mat_unit as cp_unit
	FROM material
	WHERE mat_id = 'M021'
	ORDER BY cp_id
</select>

<select id="activeMatList" resultType="ProductVO">
	SELECT mat_id as cp_id, mat_name as cp_name, mat_size as cp_size, mat_unit as cp_unit
	FROM material
	WHERE mat_stat = 'Y'
	ORDER BY cp_id
</select>

<select id="activeProcList" resultType="ProcessVO">
	SELECT com_name, proc_id, proc_name
	FROM process p left outer join common_code c
	ON p.proc_type = c.com_id
	WHERE proc_stat = 'Y'
	ORDER BY proc_id
</select>

<select id="bomList" parameterType="String" resultType="BomVO">
	SELECT bom_id, pd_id, get_pd_type(bom_mat) pdType, bom_mat, sp_name, mat_name, bom_num, bom_unit, b.proc_id, proc_name, TO_CHAR(update_date, 'yyyy-MM-dd') update_date
	FROM bom b LEFT OUTER JOIN semi_prod s ON b.bom_mat = s.sp_id
	LEFT OUTER JOIN material m ON b.bom_mat = m.mat_id
	LEFT OUTER JOIN process p ON b.proc_id = p.proc_id
	WHERE pd_id = #{id}
	ORDER BY bom_id
</select>

<insert id="addBom" parameterType="BomVO">
	INSERT INTO bom VALUES (bom_seq.nextval, #{pdId}, #{bomMat}, #{bomNum}, #{bomUnit}, #{procId}, sysdate)
</insert>

<update id="updateBom" parameterType="BomVO">
	UPDATE bom SET bom_num=#{bomNum}, bom_unit=#{bomUnit}, proc_id=#{procId}, update_date=sysdate
	WHERE bom_id = #{bomId}
</update>

<delete id="deleteBom" parameterType="java.util.List">
	DELETE FROM bom
	WHERE bom_id IN
	<foreach collection="list" item="item" open="(" close=")" separator=",">
		#{item.bomId}
	</foreach>
</delete>
<!-- BOM관리 종료 -->

<!-- 공정흐름도 관리 -->
<select id="flowList" parameterType="String" resultType="FlowVO">
	SELECT flow_id, pd_id, f.proc_id, proc_name, com_name, flow_num
	FROM FLOW f JOIN PROCESS p
	ON f.proc_id = p.proc_id
	JOIN common_code c
	ON p.proc_type = c.com_id
	WHERE pd_id = #{id}
	ORDER BY flow_num
</select>

<insert id="addFlow" parameterType="FlowVO">
	INSERT INTO flow VALUES (flow_seq.nextval, #{cpId}, #{flowNum}, #{procId})
</insert>

<update id="updateFlow" parameterType="FlowVO">
	UPDATE flow
	SET flow_num = #{flowNum}
	WHERE flow_id = #{flowId}
</update>

<delete id="deleteFlow" parameterType="java.util.List">
	DELETE FROM FLOW
	WHERE flow_id IN
	<foreach collection="list" item="item" open="(" close=")" separator=",">
		#{item.flowId}
	</foreach>
</delete>

<!-- 공정흐름도 관리 종료 -->
</mapper>